//Approach with the use of man-made variables
//Assigns specific word($key) to represent a variable
$colors: (
  "dark": $clr-dark,
  "pink": $clr-pink,
  "light": $clr-light,
);

@each $key, $val in $colors {
  .bg {
    &--#{$key} {
      background: $val;
    }
  }
  .text {
    &--#{$key} {
      color: $val;
    }
  }
  .btn.bg--#{$key} {
    @include btn($val);
  }
}

//Approach with the use of pre-installed properties
//Without the assignment of word($key)
$displays: flex, block, inline-block, grid;
@each $display in $displays {
  .d {
    &--#{$display} {
      display: $display;
    }
  }
}

//Approach with the use of pre-installed properties
//With the assignment of word($key)
// $displays: (
//   "flex": flex,
//   "block": block,
//   "grid": grid,
// );
// @each $key, $val in $displays {
//   .d {
//     &--#{$key} {
//       display: $val;
//     }
//   }
// }

$alignment: (
  "center": center,
  "left": left,
  "right": right,
  "justify": justify,
);
@each $key, $val in $alignment {
  .text {
    &--#{$key} {
      text-align: $val;
    }
  }
  .align {
    &--#{$key} {
      align-items: $val;
    }
  }
}

$just: (
  "center": center,
  "start": flex-start,
  "end": flex-end,
  "between": space-between,
  "around": space-around,
);
@each $key, $val in $just {
  .justify {
    &--#{$key} {
      justify-content: $val;
    }
  }
}

@for $i from 0 through 20 {
  .mt--#{$i} {
    margin-top: $i + rem;
  }
  .mb--#{$i} {
    margin-bottom: $i + rem;
  }
  .ml--#{$i} {
    margin-left: $i + rem;
  }
  .mr--#{$i} {
    margin-right: $i + rem;
  }
  .mx--#{$i} {
    margin: 0 $i + rem;
  }
  .py--#{$i} {
    padding: $i + rem 0;
  }
  .px--#{$i} {
    padding: 0 $i + rem;
  }
  //   .my--#{$i} {
  //     margin: $i + rem 0rem;
  //   }
  //   .mx--#{$i} {
  //     margin: 0rem $i + rem;
  //   }
}
